varnishtest "Test otp vmod"

server s1 {
       rxreq
       txresp
} -start

varnish v1 -vcl+backend {
	import std;
	import ${vmod_otp};


	sub vcl_deliver {
		set resp.http.h0 = otp.hotp(b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ", seed=0);
		set resp.http.h1 = otp.hotp(b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ", seed=1);
		set resp.http.h2 = otp.hotp(b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ", seed=2);
		set resp.http.h3 = otp.hotp(b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ", seed=3);
		set resp.http.h4 = otp.hotp(b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ", seed=4);
		set resp.http.h5 = otp.hotp(b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ", seed=5);
		set resp.http.h6 = otp.hotp(b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ", seed=6);
		set resp.http.h7 = otp.hotp(b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ", seed=7);
		set resp.http.h8 = otp.hotp(b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ", seed=8);
		set resp.http.h9 = otp.hotp(b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ", seed=9);

		set resp.http.t59_sha1   = otp.totp_settime(time=59.0,digit=8,b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ",digest=sha1);
		set resp.http.t59_sha256 = otp.totp_settime(time=59.0,digit=8,b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZA====",digest=sha256);
		set resp.http.t59_sha512 = otp.totp_settime(time=59.0,digit=8,b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNA=",digest=sha512);

		set resp.http.t1111111109_sha1   = otp.totp_settime(time=1111111109.0,digit=8,b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ",digest=sha1);
		set resp.http.t1111111109_sha256 = otp.totp_settime(time=1111111109.0,digit=8,b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZA====",digest=sha256);
		set resp.http.t1111111109_sha512 = otp.totp_settime(time=1111111109.0,digit=8,b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNA=",digest=sha512);

		set resp.http.t1111111111_sha1   = otp.totp_settime(time=1111111111.0,digit=8,b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ",digest=sha1);
		set resp.http.t1111111111_sha256 = otp.totp_settime(time=1111111111.0,digit=8,b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZA====",digest=sha256);
		set resp.http.t1111111111_sha512 = otp.totp_settime(time=1111111111.0,digit=8,b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNA=",digest=sha512);

		set resp.http.t1234567890_sha1   = otp.totp_settime(time=1234567890.0,digit=8,b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ",digest=sha1);
		set resp.http.t1234567890_sha256 = otp.totp_settime(time=1234567890.0,digit=8,b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZA====",digest=sha256);
		set resp.http.t1234567890_sha512 = otp.totp_settime(time=1234567890.0,digit=8,b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNA=",digest=sha512);

		set resp.http.t2000000000_sha1   = otp.totp_settime(time=2000000000.0,digit=8,b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ",digest=sha1);
		set resp.http.t2000000000_sha256 = otp.totp_settime(time=2000000000.0,digit=8,b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZA====",digest=sha256);
		set resp.http.t2000000000_sha512 = otp.totp_settime(time=2000000000.0,digit=8,b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNA=",digest=sha512);

		set resp.http.t20000000000_sha1   = otp.totp_settime(time=20000000000.0,digit=8,b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ",digest=sha1);
		set resp.http.t20000000000_sha256 = otp.totp_settime(time=20000000000.0,digit=8,b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZA====",digest=sha256);
		set resp.http.t20000000000_sha512 = otp.totp_settime(time=20000000000.0,digit=8,b32_secret="GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNA=",digest=sha512);

	}
} -start

client c1 {
	txreq -url "/"
	rxresp

	expect resp.http.h0 == "755224"
	expect resp.http.h1 == "287082"
	expect resp.http.h2 == "359152"
	expect resp.http.h3 == "969429"
	expect resp.http.h4 == "338314"
	expect resp.http.h5 == "254676"
	expect resp.http.h6 == "287922"
	expect resp.http.h7 == "162583"
	expect resp.http.h8 == "399871"
	expect resp.http.h9 == "520489"

	expect resp.http.t59_sha1   == "94287082"
	expect resp.http.t59_sha256 == "46119246"
	expect resp.http.t59_sha512 == "90693936"

	expect resp.http.t1111111109_sha1   == "07081804"
	expect resp.http.t1111111109_sha256 == "68084774"
	expect resp.http.t1111111109_sha512 == "25091201"

	expect resp.http.t1111111111_sha1   == "14050471"
	expect resp.http.t1111111111_sha256 == "67062674"
	expect resp.http.t1111111111_sha512 == "99943326"

	expect resp.http.t1234567890_sha1   == "89005924"
	expect resp.http.t1234567890_sha256 == "91819424"
	expect resp.http.t1234567890_sha512 == "93441116"

	expect resp.http.t2000000000_sha1   == "69279037"
	expect resp.http.t2000000000_sha256 == "90698825"
	expect resp.http.t2000000000_sha512 == "38618901"

	expect resp.http.t20000000000_sha1   == "65353130"
	expect resp.http.t20000000000_sha256 == "77737706"
	expect resp.http.t20000000000_sha512 == "47863826"

}

client c1 -run

#RFC4226 HOTP
#Appendix D - HOTP Algorithm: Test Values
#
#   The following test data uses the ASCII string
#   "12345678901234567890" for the secret:
#
#   Secret = 0x3132333435363738393031323334353637383930
#
#   Table 1 details for each count, the intermediate HMAC value.
#
#   Count    Hexadecimal HMAC-SHA-1(secret, count)
#   0        cc93cf18508d94934c64b65d8ba7667fb7cde4b0
#   1        75a48a19d4cbe100644e8ac1397eea747a2d33ab
#   2        0bacb7fa082fef30782211938bc1c5e70416ff44
#   3        66c28227d03a2d5529262ff016a1e6ef76557ece
#   4        a904c900a64b35909874b33e61c5938a8e15ed1c
#   5        a37e783d7b7233c083d4f62926c7a25f238d0316
#   6        bc9cd28561042c83f219324d3c607256c03272ae
#   7        a4fb960c0bc06e1eabb804e5b397cdc4b45596fa
#   8        1b3c89f65e6c9e883012052823443f048b4332db
#   9        1637409809a679dc698207310c8c7fc07290d9e5
#
#   Table 2 details for each count the truncated values (both in
#   hexadecimal and decimal) and then the HOTP value.
#
#                     Truncated
#   Count    Hexadecimal    Decimal        HOTP
#   0        4c93cf18       1284755224     755224
#   1        41397eea       1094287082     287082
#   2         82fef30        137359152     359152
#   3        66ef7655       1726969429     969429
#   4        61c5938a       1640338314     338314
#   5        33c083d4        868254676     254676
#   6        7256c032       1918287922     287922
#   7         4e5b397         82162583     162583
#   8        2823443f        673399871     399871
#   9        2679dc69        645520489     520489


#RFC 6238                      HOTPTimeBased                     May 2011
#
#
#   The test token shared secret uses the ASCII string value
#   "12345678901234567890".  With Time Step X = 30, and the Unix epoch as
#   the initial value to count time steps, where T0 = 0, the TOTP
#   algorithm will display the following values for specified modes and
#   timestamps.
#
#  +-------------+--------------+------------------+----------+--------+
#  |  Time (sec) |   UTC Time   | Value of T (hex) |   TOTP   |  Mode  |
#  +-------------+--------------+------------------+----------+--------+
#  |      59     |  1970-01-01  | 0000000000000001 | 94287082 |  SHA1  |
#  |             |   00:00:59   |                  |          |        |
#  |      59     |  1970-01-01  | 0000000000000001 | 46119246 | SHA256 |
#  |             |   00:00:59   |                  |          |        |
#  |      59     |  1970-01-01  | 0000000000000001 | 90693936 | SHA512 |
#  |             |   00:00:59   |                  |          |        |
#  |  1111111109 |  2005-03-18  | 00000000023523EC | 07081804 |  SHA1  |
#  |             |   01:58:29   |                  |          |        |
#  |  1111111109 |  2005-03-18  | 00000000023523EC | 68084774 | SHA256 |
#  |             |   01:58:29   |                  |          |        |
#  |  1111111109 |  2005-03-18  | 00000000023523EC | 25091201 | SHA512 |
#  |             |   01:58:29   |                  |          |        |
#  |  1111111111 |  2005-03-18  | 00000000023523ED | 14050471 |  SHA1  |
#  |             |   01:58:31   |                  |          |        |
#  |  1111111111 |  2005-03-18  | 00000000023523ED | 67062674 | SHA256 |
#  |             |   01:58:31   |                  |          |        |
#  |  1111111111 |  2005-03-18  | 00000000023523ED | 99943326 | SHA512 |
#  |             |   01:58:31   |                  |          |        |
#  |  1234567890 |  2009-02-13  | 000000000273EF07 | 89005924 |  SHA1  |
#  |             |   23:31:30   |                  |          |        |
#  |  1234567890 |  2009-02-13  | 000000000273EF07 | 91819424 | SHA256 |
#  |             |   23:31:30   |                  |          |        |
#  |  1234567890 |  2009-02-13  | 000000000273EF07 | 93441116 | SHA512 |
#  |             |   23:31:30   |                  |          |        |
#  |  2000000000 |  2033-05-18  | 0000000003F940AA | 69279037 |  SHA1  |
#  |             |   03:33:20   |                  |          |        |
#  |  2000000000 |  2033-05-18  | 0000000003F940AA | 90698825 | SHA256 |
#  |             |   03:33:20   |                  |          |        |
#  |  2000000000 |  2033-05-18  | 0000000003F940AA | 38618901 | SHA512 |
#  |             |   03:33:20   |                  |          |        |
#  | 20000000000 |  2603-10-11  | 0000000027BC86AA | 65353130 |  SHA1  |
#  |             |   11:33:20   |                  |          |        |
#  | 20000000000 |  2603-10-11  | 0000000027BC86AA | 77737706 | SHA256 |
#  |             |   11:33:20   |                  |          |        |
#  | 20000000000 |  2603-10-11  | 0000000027BC86AA | 47863826 | SHA512 |
#  |             |   11:33:20   |                  |          |        |
#  +-------------+--------------+------------------+----------+--------+
